{"version":3,"sources":["App.jsx","index.jsx"],"names":["SORT_GOODS_NAME","SORT_GOODS_LENGTH","goodsFromServer","App","useState","sortField","setSortField","reverseField","setReverseField","visibleGoods","goods","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAOMA,EAAkB,OAClBC,EAAoB,SAEbC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA4BK,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACMC,EA5BR,SAA0BC,EAAOL,EAAWE,GAC1C,IAAMI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EACH,OAAOa,EAAME,cAAcD,GAE7B,KAAKb,EACH,OAAOY,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXT,GACFI,EAAcM,UAGTN,EAOLO,CAAiBhB,EAAiBG,EAAWE,GAG/C,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IACE,SACA,UACA,CAAE,WAAYhB,IAAcL,IAGhCsB,QAAS,WACPhB,EAAaN,IAVjB,iCAgBA,wBACEoB,KAAK,SACLD,UACEE,IACE,SACA,aACA,CAAE,WAAYhB,IAAcJ,IAGhCqB,QAAS,WACPhB,EAAaL,IAVjB,4BAgBA,wBACEmB,KAAK,SACLD,UACEE,IACE,SACA,aACA,CAAE,YAAad,IAGnBe,QAAS,WACPd,GAAiBD,IAVrB,sBAgBEF,GAAaE,IACb,wBACEa,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPhB,EAAa,IACbE,GAAgB,IALpB,sBAaJ,6BAEIC,EAAac,KAAI,SAAAC,GAAI,OACnB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YC1HnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.db035db2.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\n\nimport { useState } from 'react';\n\nimport cn from 'classnames';\n\nconst SORT_GOODS_NAME = 'name';\nconst SORT_GOODS_LENGTH = 'length';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreparedGoods(goods, sortField, reverseField) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_GOODS_NAME:\n          return good1.localeCompare(good2);\n\n        case SORT_GOODS_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseField) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [reverseField, setReverseField] = useState(false);\n  const visibleGoods = (\n    getPreparedGoods(goodsFromServer, sortField, reverseField)\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-info',\n              { 'is-light': sortField !== SORT_GOODS_NAME },\n            )\n          }\n          onClick={() => {\n            setSortField(SORT_GOODS_NAME);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-success',\n              { 'is-light': sortField !== SORT_GOODS_LENGTH },\n            )\n          }\n          onClick={() => {\n            setSortField(SORT_GOODS_LENGTH);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-warning',\n              { 'is-light': !reverseField },\n            )\n          }\n          onClick={() => {\n            setReverseField(!reverseField);\n          }}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reverseField) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField('');\n              setReverseField(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {\n          visibleGoods.map(good => (\n            <li\n              data-cy=\"Good\"\n              key={good}\n            >\n              {good}\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}